#!/usr/bin/python2.7

import json
import sys
import getopt

import erpc.abi as abi

import os.path

from time import sleep

from erpc import erpc

from common.common import JSONToOD, hasConstructor

from colorama import Fore


def usage():
    print "sc-push -- Deploy and register contracts"
    print "Usage: sc-push [-h host -p port -i account_index] <-d|-c|-s arg...>"
    print ""
    print "\t-c combined \tDeploy combined ABI + code JSON generated by sc-compile"
    print "\t-s assembly \tDeploy EVM bytecode directly (requires -x)"
    print "\t-x file     \tWhen calling into addresses or deploying assembly, supply an accompanying JSON definition file specifying function signatures"
    print "\t-d file     \tDeploy solidity source contract"
    print "\t-t test-file\tUse tests file in case contract has constructor"
    print "\t-m mapfile  \tSpecify explicit mapfile (default: ./contracts.map)"
    print "\t-g gas      \tAllocate gas for transaction (default: 1000000)"
    print "\t-i index    \tUse account[index] for transaction, must already be unlocked (default: 0)"
    print "\t-h host     \tConnect to host (default: localhost)"
    print "\t-p port     \tConnect to port (default: 8545)"


def fileToStr(file):
    with open(file, 'r') as content_file:
        string = content_file.read()

    return string


def updateMap(addr, contractInfo, mapfile):
    chainMap = dict()
    if os.path.isfile(mapfile):
        chainMap = JSONToOD(mapfile)

    for scope in contractInfo:
        chainMap[scope] = {
            "addr": contractInfo[scope]["addr"],
            "creator": addr,
            "abi": contractInfo[scope]["abi"],
            "code": contractInfo[scope]["code"]
        }
        print "Updated map for " + scope

    with open(mapfile, 'w') as outfile:
        json.dump(chainMap, outfile, sort_keys=True, indent=4)

    return chainMap


def getContractData(contract, scope, contractTests):
    scinit = ""
    code = contract[scope]["code"]
    scABI = contract[scope]["abi"]

    cargs = hasConstructor(scABI)
    if cargs:
        if contractTests is None or "constructor" not in contractTests[scope]:
            print "A contract with a constructor needs a definition file with a 'constructor' initializer"
            sys.exit(1)

        scinit = abi.encode_abi(cargs, contractTests[scope]["constructor"]).encode("hex")

    return scinit, code


def deployContract(rpc, addr, gas, scinit, code, contractInfo, scope):
    tr, thash = rpc.sendTransactionWait({"from": addr, "data": code + scinit, "gas": gas})

    print "Received transaction hash", thash

    if tr is not None:
        cAddr = tr["contractAddress"]
        contractInfo[scope]["addr"] = cAddr
        contractInfo[scope]["block"] = tr["blockNumber"]
        print "Contract address for ", scope, ": ", cAddr
    else:
        print "Failed to commit contract ", scope, " to the blockchain"
        sys.exit(1)

    print json.dumps(tr, sort_keys=True, separators=(',', ': '), indent=4)
    return contractInfo


def deployAsmContract(rpc, addr, gas, asm, contractInfo, contractTests):

    for scope in contractInfo:
        if asm is not False:
            contractInfo[scope]["code"] = asm

        scinit, code = getContractData(contractInfo, scope, contractTests)
        contractInfo = deployContract(rpc, addr, gas, scinit, code, contractInfo, scope)

    return contractInfo


def deploySolContract(rpc, addr, gas, solfile, contractTests):
    with open(solfile, 'r') as content_file:
        solcode = content_file.read()

    contract = rpc.compileContract(solcode.replace('\n', ' '))
    if contract is False:
        print rpc.error
        sys.exit(1)

    contractInfo = dict()

    for scope in contract:
        contract[scope]["abi"] = contract["info"]["abiDefinition"]
        scinit, code = getContractData(contract, scope, contractTests)
        contractInfo = deployContract(rpc, addr, gas, scinit, code, contractInfo)

    return contractInfo


def checkContractCode(rpc, contractInfo):
    sleep(5)
    for scope in contractInfo:
        addr = contractInfo[scope]["addr"]
        code = rpc.getCode(addr)
        if len(code) < 4:
            return 1
        else:
            return 0


def main(argv):

    host = "localhost"
    port = "8545"
    sfile = None
    tests = None
    sigfile = None
    asmfile = None
    gas = hex(int("1000000"))
    mapfile = "./contracts.map"
    addrIndex = 0
    combined = None

    contractTests = None

    try:
        opts, args = getopt.getopt(argv, "h:p:t:d:i:x:s:g:c:", ["help"])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt == "--help":
            usage()
            sys.exit()
        elif opt == '-h':
            host = arg
        elif opt == '-p':
            port = arg
        elif opt == '-d':
            sfile = arg
        elif opt == '-t':
            tests = arg
        elif opt == '-i':
            addrIndex = int(arg)
        elif opt == '-x':
            sigfile = arg
        elif opt == '-s':
            asmfile = arg
        elif opt == '-c':
            combined = arg
        elif opt == '-m':
            mapfile = arg
        elif opt == '-g':
            gas = hex(int(arg))

    if asmfile and sigfile is None:
        print "Error: -x required when using -s"
        sys.exit()

    if (not asmfile) and (not combined) and (not sfile):
        print "Either -s, -c, or -d required"
        sys.exit()

    rpc = erpc.ERPC(host, port)

    addr = rpc.getAccount()[addrIndex]

    print "Using account w/ address: " + addr

    if tests:
        contractTests = JSONToOD(tests)

    if sigfile:
        contractInfo = JSONToOD(sigfile)

    if sfile:
        contractInfo = deploySolContract(rpc, addr, gas, sfile, contractTests)

    if combined:
        contractInfo = JSONToOD(combined)
        contractInfo = deployAsmContract(rpc, addr, gas, False, contractInfo, contractTests)

    if asmfile:
        contractInfo = deployAsmContract(rpc, addr, gas, fileToStr(asmfile), contractInfo, contractTests)

    if checkContractCode(rpc, contractInfo) != 0:
        print Fore.RED + "ERROR: Contract code not deployed, possible out of gas error" + Fore.RESET
        return

    updateMap(addr, contractInfo, mapfile)


if __name__ == "__main__":
    main(sys.argv[1:])
